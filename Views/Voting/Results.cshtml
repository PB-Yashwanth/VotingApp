@{
    ViewBag.Title = "Voting Results";
}
<h2>Live Voting Results</h2>

<p>Total Votes: <strong>@ViewBag.TotalVotes</strong></p>
@if (ViewBag.LeadingParty != null)
{
    <p>Leading Party: <strong>@ViewBag.LeadingParty</strong></p>
}

<!-- Download Votes Button -->
<p>
    <a href="@Url.Action("DownloadVotes", "Voting")" class="btn btn-primary">
        Download Votes (CSV)
    </a>
</p>

<canvas id="voteChart" width="400" height="200"></canvas>

<br />
<a href="@Url.Action("Index")">Back to Voting</a>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('voteChart').getContext('2d');
    var voteChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'Votes',
                data: [],
                backgroundColor: [
                    'rgba(255, 165, 0, 0.6)', // BJP - orange
                    'rgba(0, 0, 255, 0.6)',   // Congress - blue
                    'rgba(0, 255, 0, 0.6)'    // AAP - green
                ]
            }]
        },
        options: {
            responsive: true,
            animation: false,
            scales: {
                y: {
                    beginAtZero: true,
                    precision: 0 // ensures integers on axis
                }
            }
        }
    });

    function fetchResults() {
        fetch(window.location.origin + '/Voting/GetResults') // âœ… works for both HTTP/HTTPS
            .then(res => res.json())
            .then(data => {
                voteChart.data.labels = data.map(x => x.candidate);
                voteChart.data.datasets[0].data = data.map(x => x.votes);
                voteChart.update();
            });
    }

    setInterval(fetchResults, 2000); // refresh every 2s
    fetchResults();
</script>
